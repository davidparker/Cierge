@using System.Linq
@model LoginViewModel
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Log in";
}
@{
    Layout = "_LayoutOther";
}

@if (SignInManager.IsSignedIn(User))
{
    <h2 class="card-title text-center">Add another login method</h2>
    <a asp-controller="Manage" asp-action="@nameof(ManageController.Logins)" class="btn btn-primary btn-round">
        <i class="material-icons">assignment</i>&nbsp;
        Manage existing
    </a>
}
else
{
    <h2 class="card-title text-center">Login or signup</h2>
}


@if (SignInManager.IsSignedIn(User) && Model != null && Model.DidReachMaxLoginsAllowed)
{
    <p class="text-warning">
    Sorry, you&#39;ve reached the maximum number of logins allowed (@Model.MaxLoginsAllowed).
    </p>
    <a asp-controller="Manage" asp-action="@nameof(ManageController.Logins)" class="btn btn-primary btn-round">
        <i class="material-icons">assignment</i>&nbsp;
        Manage existing and remove one to make room
    </a>
}
else
{

    <form onsubmit="preventDoubleSubmission(this)" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post">
        <div asp-validation-summary="All" class="text-danger"></div>

        <div class="form-group">
            <label class="control-label" asp-for="Email"></label>
            <input type="text" class="form-control" asp-for="Email" id="EmailIn" placeholder="Enter new email address">
            <span asp-validation-for="Email"></span>
        </div>


        @if (!SignInManager.IsSignedIn(User))
        {
            <div class="form-group">
                <input asp-for="RememberMe" checked="@true" class="form-control" />
                <label asp-for="RememberMe" class="control-label">@Html.DisplayNameFor(m => m.RememberMe)</label>
            </div>
        }

        <button class="btn btn-primary btn-round"
                type="submit"
                name="submitEmail">
            @if (SignInManager.IsSignedIn(User))
            {
                <span>
                    <i class="material-icons" aria-hidden="true">email</i>&nbsp;
                    Add email
                </span>
            }
            else
            {
                <span>
                    <i class="material-icons" aria-hidden="true">lock_open</i>&nbsp;
                    Login or signup
                </span>
            }
        </button>
    </form>


    var loginProviders = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    if (loginProviders.Count == 0)
    {
    }
    else
    {
        <hr />
        <h4>Or an external login...</h4>

       
        <form asp-action="@nameof(AccountController.ExternalLoginAsync)" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="column">
            <div>
                <p>
                    @foreach (var provider in loginProviders)
                    {
                        <button type="submit" class="btn btn-default" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                            @switch (provider.DisplayName.ToLower())
                            {
                                case "google":
                                    <span><i class="fa fa-google" aria-hidden="true"></i>&nbsp;</span>
                                    break;
                                case "twitter":
                                    <span><i class="fa fa-twitter" aria-hidden="true"></i>&nbsp;</span>
                                    break;
                                case "facebook":
                                    <span><i class="fa fa-facebook" aria-hidden="true"></i>&nbsp;</span>
                                    break;
                                case "microsoft":
                                    <span><i class="fa fa-windows" aria-hidden="true"></i>&nbsp;</span>
                                    break;
                                case "github":
                                    <span><i class="fa fa-github" aria-hidden="true"></i>&nbsp;</span>
                                    break;
                                default:
                                    <span><i class="fa fa-id-badge" aria-hidden="true"></i>&nbsp;</span>
                                    break;
                            }
                            @provider.Name
                        </button>
                    }
                </p>
            </div>
        </form>


    }
}


@section Scripts {
    <script>

        function preventDoubleSubmission(form) {
            if (form.checkValidity() && document.getElementById("EmailIn").value !== "") {
                form.submitEmail.innerHTML = "<i class='fa fa-spinner' aria-hidden='true'></i>&nbsp;" +
                    "Sending...";
                form.submitEmail.disabled = true;
            }

            return true;
        }

    </script>

    @await Html.PartialAsync("_ValidationScriptsPartial")
}